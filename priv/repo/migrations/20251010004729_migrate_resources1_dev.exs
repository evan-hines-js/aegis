defmodule Aegis.Repo.Migrations.MigrateResources1 do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :email, :citext, null: false
      add :admin, :boolean, null: false, default: true
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:tokens, primary_key: false) do
      add :jti, :text, null: false, primary_key: true
      add :subject, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :purpose, :text, null: false
      add :extra_data, :map

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:servers, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :name, :text, null: false
      add :endpoint, :text, null: false
      add :auth_type, :text, null: false, default: "none"
      add :api_key_header, :text, default: "Authorization"
      add :api_key_template, :text, default: "{API_KEY}"
      add :capabilities, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :encrypted_api_key, :binary
    end

    create unique_index(:servers, [:name], name: "servers_unique_name_index")

    create table(:mcp_persisted_sessions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :session_id, :text, null: false
      add :client_id, :text, null: false
      add :session_data, :map, null: false

      add :persisted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:mcp_persisted_sessions, [:session_id],
             name: "mcp_persisted_sessions_unique_session_id_index"
           )

    create table(:mcp_permissions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :resource_type, :text, null: false
      add :server_name, :text, null: false
      add :resource_pattern, :text, null: false
      add :action, :text, null: false
      add :description, :text

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(
             :mcp_permissions,
             [:resource_type, :server_name, :resource_pattern, :action],
             name: "mcp_permissions_unique_permission_index"
           )

    create table(:mcp_clients, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :name, :text, null: false
      add :description, :text
      add :api_key_hash, :text, null: false
      add :api_key_lookup_hash, :text, null: false
      add :active, :boolean, null: false, default: true
      add :page_size, :bigint, null: false, default: 50

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:mcp_clients, [:name], name: "mcp_clients_unique_name_index")

    create table(:mcp_client_permissions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true

      add :client_id,
          references(:mcp_clients,
            column: :id,
            name: "mcp_client_permissions_client_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :permission_id,
          references(:mcp_permissions,
            column: :id,
            name: "mcp_client_permissions_permission_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:mcp_client_permissions, [:client_id, :permission_id],
             name: "mcp_client_permissions_unique_client_permission_index"
           )
  end

  def down do
    drop_if_exists unique_index(:mcp_client_permissions, [:client_id, :permission_id],
                     name: "mcp_client_permissions_unique_client_permission_index"
                   )

    drop constraint(:mcp_client_permissions, "mcp_client_permissions_client_id_fkey")

    drop constraint(:mcp_client_permissions, "mcp_client_permissions_permission_id_fkey")

    drop table(:mcp_client_permissions)

    drop_if_exists unique_index(:mcp_clients, [:name], name: "mcp_clients_unique_name_index")

    drop table(:mcp_clients)

    drop_if_exists unique_index(
                     :mcp_permissions,
                     [:resource_type, :server_name, :resource_pattern, :action],
                     name: "mcp_permissions_unique_permission_index"
                   )

    drop table(:mcp_permissions)

    drop_if_exists unique_index(:mcp_persisted_sessions, [:session_id],
                     name: "mcp_persisted_sessions_unique_session_id_index"
                   )

    drop table(:mcp_persisted_sessions)

    drop_if_exists unique_index(:servers, [:name], name: "servers_unique_name_index")

    drop table(:servers)

    drop table(:tokens)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)
  end
end
